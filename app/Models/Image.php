<?php

namespace App\Models;

use Cloudinary;
use Cloudinary\Uploader;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use ImageKit\ImageKit;
use Log;
use Ramsey\Uuid\Uuid;

/**
 * Class Image
 * @package App\Models
 * @author  Cookie
 */
class Image extends Model
{
    use HasFactory;

    protected $guarded = ['id'];

    protected $casts = [
        'data'     => 'array',
        'cdn_data' => 'array',
    ];

    /**
     * @param $localPath
     * @param $type
     * @return mixed
     * @deprecated or update this method
     */
//    public static function upload($localPath, $type)
//    {
//        $fileName = Uuid::uuid4();
//
//        $result = Uploader::upload($localPath, [
//            "folder"        => $type,
//            "public_id"     => $fileName,
//            "overwrite"     => TRUE,
//            "resource_type" => "image"
//        ]);
//
//        return self::create([
//            "url"           => $result['url'],
//            "data"          => $result,
//            "created_by_id" => auth()->id(),
//        ]);
//    }

    protected static function boot(): void
    {
        self::deleting(function (self $image) {
            if ($imageKitFileId  = @$image->cdn_data['success']['fileId']) {
                imagekit_api()->deleteFile($imageKitFileId);
            }
        });

        parent::boot(); // TODO: Change the autogenerated stub
    }

    /**
     * @param Builder $builder
     * @return mixed
     */
    public function scopeUnprocessed(Builder $builder)
    {
        return $builder->whereProcessed(false);
    }

    /**
     * @param Builder $builder
     * @return mixed
     */
    public function scopeProcessed(Builder $builder)
    {
        return $builder->whereProcessed(true);
    }

    /**
     * @param Builder $builder
     * @return mixed
     */
    public function scopeCreators(Builder $builder)
    {
        return $builder->whereType("creator");
    }

    /**
     * @param false $force
     * @return $this
     */
    public function process($force = false): Image
    {
        if ($this->processed and !$force) {
            Log::warning("Image {$this->url} was already processed.");

            return $this;
        }

        // we choose imagekit !!!
        return $this->uploadImagekit();
    }

    /**
     * @return $this
     */
    public function uploadImagekit(): self
    {
        $fileName = $this->id . "_" . Uuid::uuid4();

        $pathUrl = $this->original_url ?? $this->url;

        $file = Str::startsWith($pathUrl, 'http') ? $pathUrl : fopen($pathUrl, "r");

        $res = imagekit_api()->uploadFiles([
            "file"              => $file, // required
            "fileName"          => $fileName, // required
            "useUniqueFileName" => false, // optional
            "folder"            => app()->environment() . '/' . $this->type,
            "isPrivateFile"     => false, // optional
            "responseFields"    => "tags,customCoordinates" // optional
            //            "customCoordinates" => "10,10,100,100", // optional
            //            "tags" => array("tag1","tag2"), // optional
        ]);

        // update info
        if ($res->success) {
            $this->original_url = $this->original_url ?? $this->url; // leave original if is set
            $this->url = $res->success->url;
            $this->cdn_data = (array)$res;
            $this->processed = true;

            $this->save();

            Log::info("Image {$this->url} was uploaded.");
        } else {
            Log::error("Image {$this->url} error.", [$res]);
        }

        imagekit_api()->purgeFileCacheApi($this->url);

        return $this;
    }

    /**
     * @return $this
     */
    public function revertToOriginal(): self
    {
        if ($this->original_url and $this->processed) {
            $this->url = $this->original_url;
            $this->processed = false;
            $this->save();
        }

        return $this;
    }
}
